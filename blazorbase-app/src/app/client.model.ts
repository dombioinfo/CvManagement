//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getObject(objClassName: string, id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/App/GetObject/{objClassName}/{id}";
        if (objClassName === undefined || objClassName === null)
            throw new Error("The parameter 'objClassName' must be defined.");
        url_ = url_.replace("{objClassName}", encodeURIComponent("" + objClassName));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetObject(_response);
        });
    }

    protected processGetObject(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getObjectList(objClassName: string): Promise<void> {
        let url_ = this.baseUrl + "/api/App/GetObjectList/{objClassName}";
        if (objClassName === undefined || objClassName === null)
            throw new Error("The parameter 'objClassName' must be defined.");
        url_ = url_.replace("{objClassName}", encodeURIComponent("" + objClassName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetObjectList(_response);
        });
    }

    protected processGetObjectList(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postObject(objClassName: string, body: any | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/App/PostObject/{objClassName}";
        if (objClassName === undefined || objClassName === null)
            throw new Error("The parameter 'objClassName' must be defined.");
        url_ = url_.replace("{objClassName}", encodeURIComponent("" + objClassName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostObject(_response);
        });
    }

    protected processPostObject(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    user(): Promise<User[]> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }

    /**
     * @return Success
     */
    user2(id: number): Promise<User[]> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser2(_response);
        });
    }

    protected processUser2(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }

    /**
     * @return Success
     */
    getweatherlist(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast/getweatherlist";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetweatherlist(_response);
        });
    }

    protected processGetweatherlist(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class Profil implements IProfil {
    id?: number;
    dateUpdate?: Date;
    dateCreation?: Date;
    updateUserId?: number;
    createUserId?: number;
    libelle?: string | undefined;

    constructor(data?: IProfil) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dateUpdate = _data["dateUpdate"] ? new Date(_data["dateUpdate"].toString()) : <any>undefined;
            this.dateCreation = _data["dateCreation"] ? new Date(_data["dateCreation"].toString()) : <any>undefined;
            this.updateUserId = _data["updateUserId"];
            this.createUserId = _data["createUserId"];
            this.libelle = _data["libelle"];
        }
    }

    static fromJS(data: any): Profil {
        data = typeof data === 'object' ? data : {};
        let result = new Profil();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dateUpdate"] = this.dateUpdate ? this.dateUpdate.toISOString() : <any>undefined;
        data["dateCreation"] = this.dateCreation ? this.dateCreation.toISOString() : <any>undefined;
        data["updateUserId"] = this.updateUserId;
        data["createUserId"] = this.createUserId;
        data["libelle"] = this.libelle;
        return data;
    }
}

export interface IProfil {
    id?: number;
    dateUpdate?: Date;
    dateCreation?: Date;
    updateUserId?: number;
    createUserId?: number;
    libelle?: string | undefined;
}

export class User implements IUser {
    id?: number;
    dateUpdate?: Date;
    dateCreation?: Date;
    updateUserId?: number;
    createUserId?: number;
    login?: string | undefined;
    nom?: string | undefined;
    prenom?: string | undefined;
    age?: number;
    profil?: Profil;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dateUpdate = _data["dateUpdate"] ? new Date(_data["dateUpdate"].toString()) : <any>undefined;
            this.dateCreation = _data["dateCreation"] ? new Date(_data["dateCreation"].toString()) : <any>undefined;
            this.updateUserId = _data["updateUserId"];
            this.createUserId = _data["createUserId"];
            this.login = _data["login"];
            this.nom = _data["nom"];
            this.prenom = _data["prenom"];
            this.age = _data["age"];
            this.profil = _data["profil"] ? Profil.fromJS(_data["profil"]) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dateUpdate"] = this.dateUpdate ? this.dateUpdate.toISOString() : <any>undefined;
        data["dateCreation"] = this.dateCreation ? this.dateCreation.toISOString() : <any>undefined;
        data["updateUserId"] = this.updateUserId;
        data["createUserId"] = this.createUserId;
        data["login"] = this.login;
        data["nom"] = this.nom;
        data["prenom"] = this.prenom;
        data["age"] = this.age;
        data["profil"] = this.profil ? this.profil.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUser {
    id?: number;
    dateUpdate?: Date;
    dateCreation?: Date;
    updateUserId?: number;
    createUserId?: number;
    login?: string | undefined;
    nom?: string | undefined;
    prenom?: string | undefined;
    age?: number;
    profil?: Profil;
}

export class WeatherForecast implements IWeatherForecast {
    id?: number;
    dateUpdate?: Date;
    dateCreation?: Date;
    updateUserId?: number;
    createUserId?: number;
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dateUpdate = _data["dateUpdate"] ? new Date(_data["dateUpdate"].toString()) : <any>undefined;
            this.dateCreation = _data["dateCreation"] ? new Date(_data["dateCreation"].toString()) : <any>undefined;
            this.updateUserId = _data["updateUserId"];
            this.createUserId = _data["createUserId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dateUpdate"] = this.dateUpdate ? this.dateUpdate.toISOString() : <any>undefined;
        data["dateCreation"] = this.dateCreation ? this.dateCreation.toISOString() : <any>undefined;
        data["updateUserId"] = this.updateUserId;
        data["createUserId"] = this.createUserId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    id?: number;
    dateUpdate?: Date;
    dateCreation?: Date;
    updateUserId?: number;
    createUserId?: number;
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}